<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on WKLKEN THINKING</title>
    <link>https://wklken.me/tags/golang.html</link>
    <description>Recent content in golang on WKLKEN THINKING</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 04 Aug 2021 08:00:00 +0800</lastBuildDate><atom:link href="https://wklken.me/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go: some libs</title>
      <link>https://wklken.me/posts/2021/08/04/golang-some-libs.html</link>
      <pubDate>Wed, 04 Aug 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/08/04/golang-some-libs.html</guid>
      <description>I have finished 3 web projects in the past 16 months, about 100000 lines.
The libs below are my recommended.
Last Updated: 2021-08-04
framework recommend gin chi layout golang-standards/project-layout
database sqlx gorm cache memory: go-cache redis: go-redis/redis cache go-redis/cache distribute lock redislock ratelimit: go-redis/redis_rate http client gorequest test assert testify BDD onsi/ginkgo steinfletcher/apitest mock DATA-DOG/go-sqlmock gomonkey miniredis logger recommend uber-go/zap sirupsen/logrus lumberjack doc swaggo/swag gin swaggo/gin-swaggo error uber-go/multierr config &amp;amp; cli viper cobra json json-iterator/go observability sentry-go client_golang validate go-playground/validator worker pool panjf2000/ants others dgrijalva/jwt-go elasticsearch msgpack </description>
    </item>
    
    <item>
      <title>Go: go-redis/cache升级的坑</title>
      <link>https://wklken.me/posts/2021/03/05/golang-upgrade-go-redis-cache.html</link>
      <pubDate>Fri, 05 Mar 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/03/05/golang-upgrade-go-redis-cache.html</guid>
      <description>这是在做 Golang 项目中的一些实践 在做一个项目, 使用了 go-redis/redis 及 go-redis/cache 某个节点, 做了所有依赖包的升级. 在做缓存依赖包的升级时, 必须十分注意, 新版本的第三方包做</description>
    </item>
    
    <item>
      <title>Go: logrus性能提升</title>
      <link>https://wklken.me/posts/2021/02/09/golang-high-performance-logrus.html</link>
      <pubDate>Tue, 09 Feb 2021 20:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/02/09/golang-high-performance-logrus.html</guid>
      <description>在Go项目中, logrus是一个相对完备的第三方日志库 用起来非常顺手, 特别是WithField/WithFields/WithError 我们</description>
    </item>
    
    <item>
      <title>Go: gin validation</title>
      <link>https://wklken.me/posts/2021/02/04/golang-gin-validation.html</link>
      <pubDate>Thu, 04 Feb 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/02/04/golang-gin-validation.html</guid>
      <description>这是在做 Golang 项目中的一些实践 传统的校验方式 需要在获取数据后, 写很多if判断语句, 无法复用且非常罗嗦 if a != &amp;#34;&amp;#34; { } if len(a) &amp;lt; 10 { } gin 的参数校验 gin 使用了</description>
    </item>
    
    <item>
      <title>Go: 开发过程中的一些bug</title>
      <link>https://wklken.me/posts/2021/01/28/golang-bugs.html</link>
      <pubDate>Thu, 28 Jan 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/28/golang-bugs.html</guid>
      <description>1. make slice 很容易漏掉中间参数, 引入 bug并且很难排查 package main import &amp;#34;fmt&amp;#34; func doCopy(a []string) []string { b := make([]string, len(a)) for _, i := range a { b = append(b, i) } return b } func main() { a := []string{&amp;#34;hello&amp;#34;} b := doCopy(a) fmt.Println(b, len(b)) } 得到结果 [ hello]</description>
    </item>
    
    <item>
      <title>Go: 一种error wrap调用链处理方式</title>
      <link>https://wklken.me/posts/2021/01/26/golang-error-wrap.html</link>
      <pubDate>Tue, 26 Jan 2021 14:38:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/26/golang-error-wrap.html</guid>
      <description>这是在做 Golang 项目中的一些实践 背景 在做一套内部公共服务, 提供后台API调用的时候, 某些情况下, 会返回500错误, 此时有两种做法 在后台记录详细的5</description>
    </item>
    
    <item>
      <title>Go: 基于 apitest 做handler层单元测试</title>
      <link>https://wklken.me/posts/2021/01/22/golang-apitest.html</link>
      <pubDate>Fri, 22 Jan 2021 14:35:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/22/golang-apitest.html</guid>
      <description>apitest A simple and extensible behavioural testing library. Supports mocking external http calls and renders sequence diagrams on completion. Credit to testify which is this libraries&amp;rsquo; only dependency 相关资源: Github apitest 文档 示例: Examples / Gin integration 老的方案: postman/newman 原先使用 postman + newman 的方式做的 API 功能测试; 这种</description>
    </item>
    
    <item>
      <title>Go: go-sql-driver interpolateparams参数优化</title>
      <link>https://wklken.me/posts/2021/01/22/golang-sql-driver-interpolateparams.html</link>
      <pubDate>Fri, 22 Jan 2021 12:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/22/golang-sql-driver-interpolateparams.html</guid>
      <description>这是在做 Golang 项目中的一些实践 interpolateparams 性能差异 interpolateparams=false interpolateparams=true 10261 -&amp;gt; 12117, 18% 带占位符SQL执行流程 prepared -&amp;gt; execute -&amp;gt; close 正常带占位符的sql执行过程: 客户端将该语句和参数发给mys</description>
    </item>
    
    <item>
      <title>Go: 基于 Ginkgo 框架进行单元测试实践</title>
      <link>https://wklken.me/posts/2021/01/22/golang-ginkgo.html</link>
      <pubDate>Fri, 22 Jan 2021 11:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/22/golang-ginkgo.html</guid>
      <description>这是在做 Golang 项目中的一些实践 ginkgo 基于BDD的测试框架; 开始前, 需要花半个小时阅读官方文档 reference github: https://github.com/onsi/ginkgo 文档: https://onsi.github.io/ginkgo/ table-driven 一个函数 // TruncateString truncate string to specific length func TruncateString(s string, n int) string { if n</description>
    </item>
    
    <item>
      <title>Golang笔记-06-struct</title>
      <link>https://wklken.me/posts/2014/03/09/06-struct.html</link>
      <pubDate>Sun, 09 Mar 2014 06:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/03/09/06-struct.html</guid>
      <description>struct struct，一组字段的集合，类似其他语言的class 放弃了大量包括继承在内的面向对象特性，只保留了组合(composition)这个最基</description>
    </item>
    
  </channel>
</rss>
