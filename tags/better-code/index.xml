<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>better-code on WKLKEN THINKING</title>
    <link>https://wklken.me/tags/better-code.html</link>
    <description>Recent content in better-code on WKLKEN THINKING</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 08 Jul 2022 23:00:00 +0800</lastBuildDate><atom:link href="https://wklken.me/tags/better-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Better Code: 关于接口的灵活性</title>
      <link>https://wklken.me/posts/2022/07/08/better-code-5-flexible-api.html</link>
      <pubDate>Fri, 08 Jul 2022 23:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2022/07/08/better-code-5-flexible-api.html</guid>
      <description>在实际需求开发中，我们会面对复杂多变的需求。所以在给外部提供API的时候，经常会面临接口协议的变更：例如增加一个查询字段，支持按照某个字段升</description>
    </item>
    
    <item>
      <title>Better Code: 抽象: 可扩展性与可维护性的抉择</title>
      <link>https://wklken.me/posts/2022/06/21/better-code-4-abstraction-scalability-maintainability.html</link>
      <pubDate>Tue, 21 Jun 2022 23:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2022/06/21/better-code-4-abstraction-scalability-maintainability.html</guid>
      <description>抽象程度 抽象程度高, 往往意味着: 灵活, 可扩展性高 但是, 这也同时意味着: 复杂, 可维护性低 而可维护性在一个项目的生命周期中又是非常重要的, 一次开</description>
    </item>
    
    <item>
      <title>Better Code: 异常时, 该提示用户哪些信息?</title>
      <link>https://wklken.me/posts/2022/05/24/better-code-3-better-error-message.html</link>
      <pubDate>Tue, 24 May 2022 23:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2022/05/24/better-code-3-better-error-message.html</guid>
      <description>接前一篇 Better Code: 更好的异常日志打印 做 toB 一个非常高的成本是, 用户的环境/网络/数据等, 可能跟你预期的差异很大, 再加上沟通相对困难(涉及三方/四方,</description>
    </item>
    
    <item>
      <title>Better Code: 更好的异常日志打印</title>
      <link>https://wklken.me/posts/2022/01/16/better-code-2-logging.html</link>
      <pubDate>Sun, 16 Jan 2022 00:04:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2022/01/16/better-code-2-logging.html</guid>
      <description>维护一个 N 年前的Python项目, 协助排查问题时发现, 原先的日志打印真真一言难尽 导致了一个问题, 同负责的运维 A 沟通, A 与其对接的甲方沟通&amp;h</description>
    </item>
    
    <item>
      <title>Better Code: 使用property</title>
      <link>https://wklken.me/posts/2019/10/07/better-code-1-use-property.html</link>
      <pubDate>Mon, 07 Oct 2019 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2019/10/07/better-code-1-use-property.html</guid>
      <description>introduction @property 是Python的一个内置函数, 通过property, 我们可以获得更好的可读性/可维护性 屏蔽细节, 对于外部使用者, 不需要知道更多的细节! 可</description>
    </item>
    
  </channel>
</rss>
