<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WKLKEN THINKING</title>
    <link>https://wklken.me/</link>
    <description>Recent content on WKLKEN THINKING</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 28 Sep 2024 00:00:00 +2000</lastBuildDate><atom:link href="https://wklken.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>apisix 中的 lrucache</title>
      <link>https://wklken.me/posts/2024/09/28/apisix-lrucache.html</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +2000</pubDate>
      
      <guid>https://wklken.me/posts/2024/09/28/apisix-lrucache.html</guid>
      <description>基于 3.10.0 版本 apisix 的 lrucache 封装了 resty-lrucache 及 resty-lock 机制 代码不多，逐行分析 先看下新建一个 lrucache时支持的选项 opts type 类型， 如果是插件是 plugin count 容量， 如果没有设置， 类</description>
    </item>
    
    <item>
      <title>apisix 中的服务发现机制</title>
      <link>https://wklken.me/posts/2024/09/21/apisix-service-discovery.html</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2024/09/21/apisix-service-discovery.html</guid>
      <description>基于 3.10.0 版本 机制 0. 入口 在 apisix 的ngx_tpl.lua中 init_worker_by_lua_block { apisix.http_init_worker() } apisix/init.lua local router = require(&amp;#34;apisix.router&amp;#34;) function _M.http_init_worker() ..... local discovery = require(&amp;#34;apisix.discovery.init&amp;#34;).discovery if discovery and discovery.init_worker then discovery.init_worker() end ..... end 1. discovery.init_worker apisix/discovery/init.lua local discovery_type = local_conf.discovery local discovery = {} if discovery_type then for discovery_name, _ in pairs(discovery_type) do</description>
    </item>
    
    <item>
      <title>apisix 中的负载均衡</title>
      <link>https://wklken.me/posts/2024/09/21/apisix-load-balance.html</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +2000</pubDate>
      
      <guid>https://wklken.me/posts/2024/09/21/apisix-load-balance.html</guid>
      <description>基于 3.10.0 版本 机制 0. 入口 在 apisix 的ngx_tpl.lua中 -- 初始化 init_worker_by_lua_block { apisix.http_init_worker() } -- balance balancer_by_lua_block { apisix.http_balancer_phase() } 1. 初始化 apisix/init.lua local router = require(&amp;#34;apisix.router&amp;#34;) local load_balancer function _M.http_init_worker() ..... -- 这个什么都没做 require(&amp;#34;apisix.balancer&amp;#34;).init_worker() -- 这个这个是核心</description>
    </item>
    
    <item>
      <title>apisix etcd机制</title>
      <link>https://wklken.me/posts/2024/09/17/apisix-etcd.html</link>
      <pubDate>Tue, 17 Sep 2024 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2024/09/17/apisix-etcd.html</guid>
      <description>基于 3.10.0 版本 机制 0. 入口 在 apisix 的ngx_tpl.lua中 init_worker_by_lua_block { apisix.http_init_worker() } apisix/init.lua local router = require(&amp;#34;apisix.router&amp;#34;) function _M.http_init_worker() ..... router.http_init_worker() ..... end 1. http_init_worker apisix/router.lua function _M.http_init_worker() local conf = core.config.local_conf() local router_http_name = &amp;#34;radixtree_uri&amp;#34; if conf and conf.apisix and conf.apisix.router then router_http_name = conf.apisix.router.http or router_http_name ...... end local router_http =</description>
    </item>
    
    <item>
      <title>apisix 中的 DNS 解析</title>
      <link>https://wklken.me/posts/2024/09/16/apisix-dns-resolve.html</link>
      <pubDate>Mon, 16 Sep 2024 00:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2024/09/16/apisix-dns-resolve.html</guid>
      <description>基于 3.10.0 版本 入口 在 apisix 的 ngx_tpl.lua 中相关的配置 access_by_lua_block { apisix.http_access_phase() } 即，请求在 access phase， 会走到 http_access_phase 函数 在 apisix/init.lua 的 http_access_phase 中确定匹配到的 route之后， 调用了 _M.handle_upstream(api_ctx, route, enable_websocket) 主入口： handle_upstream _M.handle_upstream</description>
    </item>
    
    <item>
      <title>如何减少打断提升效率</title>
      <link>https://wklken.me/posts/2024/08/25/how-to-reduce-interruptions-and-improve-efficiency.html</link>
      <pubDate>Sun, 25 Aug 2024 18:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2024/08/25/how-to-reduce-interruptions-and-improve-efficiency.html</guid>
      <description>去年接手一个上线小十年的系统，由于这个系统是出于上下游的中间环节（意味着会跟几乎所有系统打交道），并且存在着大量的历史包袱（意味着很多黑盒，</description>
    </item>
    
    <item>
      <title>控糖革命</title>
      <link>https://wklken.me/posts/2024/06/23/glucose-revolution.html</link>
      <pubDate>Sun, 23 Jun 2024 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2024/06/23/glucose-revolution.html</guid>
      <description>上半年去了医院，空腹血糖偏高，虽然还没有超出阈值，但是医生建议减重+低糖饮食。 然后，开始有目的性地减少糖，例如早餐减少碳水摄入，不再喝可乐等</description>
    </item>
    
    <item>
      <title>聊聊项目架构调整</title>
      <link>https://wklken.me/posts/2024/06/16/about-architecture-adjustment.html</link>
      <pubDate>Sun, 16 Jun 2024 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2024/06/16/about-architecture-adjustment.html</guid>
      <description>过度设计的反面是务实 去年接手了一套系统，花了近三个月做了一些调整才正式外发。 当时这套系统是为了满足一个时间点快速迭代发布的，接手后觉得其中有</description>
    </item>
    
    <item>
      <title>聊聊框架</title>
      <link>https://wklken.me/posts/2024/06/08/about-framework.html</link>
      <pubDate>Sat, 08 Jun 2024 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2024/06/08/about-framework.html</guid>
      <description>很久没写了，感觉是要提高下更新频率了。 今天聊聊框架，线索是我的工作经历。 刚毕业那会 大学的时候，因为学的是软件工程，所以高级编程语言当时教的是</description>
    </item>
    
    <item>
      <title>关于 k8s 的 zero downtime deployment 一些建议</title>
      <link>https://wklken.me/posts/2023/12/17/some-tips-for-zero-downtime-deployment.html</link>
      <pubDate>Sun, 17 Dec 2023 22:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2023/12/17/some-tips-for-zero-downtime-deployment.html</guid>
      <description>问题 后端服务对接了 API 网关, 服务正常, 但是在滚动更新的时候, 会出现 502 滚动更新时, k8s会起新的pod, 同时删除老的pod 可能原因: 新的pod启</description>
    </item>
    
  </channel>
</rss>
