<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WKLKEN THINKING</title>
    <link>https://wklken.me/</link>
    <description>Recent content on WKLKEN THINKING</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 24 May 2022 23:00:00 +0800</lastBuildDate><atom:link href="https://wklken.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Better Code: 异常时, 该提示用户哪些信息?</title>
      <link>https://wklken.me/posts/2022/05/24/better-code-3-better-error-message.html</link>
      <pubDate>Tue, 24 May 2022 23:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2022/05/24/better-code-3-better-error-message.html</guid>
      <description>接前一篇 Better Code: 更好的异常日志打印 做 toB 一个非常高的成本是, 用户的环境/网络/数据等, 可能跟你预期的差异很大, 再加上沟通相对困难(涉及三方/四方,</description>
    </item>
    
    <item>
      <title>Better Code: 更好的异常日志打印</title>
      <link>https://wklken.me/posts/2022/01/16/better-code-2-logging.html</link>
      <pubDate>Sun, 16 Jan 2022 00:04:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2022/01/16/better-code-2-logging.html</guid>
      <description>维护一个 N 年前的Python项目, 协助排查问题时发现, 原先的日志打印真真一言难尽 导致了一个问题, 同负责的运维 A 沟通, A 与其对接的甲方沟通&amp;h</description>
    </item>
    
    <item>
      <title>Go: some libs</title>
      <link>https://wklken.me/posts/2021/08/04/golang-some-libs.html</link>
      <pubDate>Wed, 04 Aug 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/08/04/golang-some-libs.html</guid>
      <description>I have finished 3 web projects in the past 16 months, about 100000 lines.
The libs below are my recommended.
Last Updated: 2021-08-04
framework  recommend gin chi  layout golang-standards/project-layout
database  sqlx gorm  cache  memory: go-cache redis: go-redis/redis  cache go-redis/cache distribute lock redislock ratelimit: go-redis/redis_rate    http client  gorequest  test  assert testify BDD onsi/ginkgo steinfletcher/apitest mock  DATA-DOG/go-sqlmock gomonkey miniredis    logger  recommend uber-go/zap sirupsen/logrus lumberjack  doc  swaggo/swag gin swaggo/gin-swaggo  error  uber-go/multierr  config &amp;amp; cli  viper cobra  json  json-iterator/go  observability  sentry-go client_golang  validate  go-playground/validator  worker pool  panjf2000/ants  others  dgrijalva/jwt-go elasticsearch msgpack  </description>
    </item>
    
    <item>
      <title>Go: go-redis/cache升级的坑</title>
      <link>https://wklken.me/posts/2021/03/05/golang-upgrade-go-redis-cache.html</link>
      <pubDate>Fri, 05 Mar 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/03/05/golang-upgrade-go-redis-cache.html</guid>
      <description>这是在做 Golang 项目中的一些实践 在做一个项目, 使用了 go-redis/redis 及 go-redis/cache 某个节点, 做了所有依赖包的升级. 在做缓存依赖包的升级时, 必须十分注意, 新版本的第三方包做</description>
    </item>
    
    <item>
      <title>Go: logrus性能提升</title>
      <link>https://wklken.me/posts/2021/02/09/golang-high-performance-logrus.html</link>
      <pubDate>Tue, 09 Feb 2021 20:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/02/09/golang-high-performance-logrus.html</guid>
      <description>在Go项目中, logrus是一个相对完备的第三方日志库 用起来非常顺手, 特别是WithField/WithFields/WithError 我们</description>
    </item>
    
    <item>
      <title>Go: gin validation</title>
      <link>https://wklken.me/posts/2021/02/04/golang-gin-validation.html</link>
      <pubDate>Thu, 04 Feb 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/02/04/golang-gin-validation.html</guid>
      <description>这是在做 Golang 项目中的一些实践 传统的校验方式 需要在获取数据后, 写很多if判断语句, 无法复用且非常罗嗦 if a != &amp;#34;&amp;#34; { } if len(a) &amp;lt; 10 { } gin 的参数校验 gin 使用了</description>
    </item>
    
    <item>
      <title>远程办公的一点总结</title>
      <link>https://wklken.me/posts/2021/02/01/about-remote.html</link>
      <pubDate>Mon, 01 Feb 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/02/01/about-remote.html</guid>
      <description>这是去年疫情期间, 公司实施了接近两个月的远程, 当时写下的一些小结 不好的地方 人都有惰性, 另外个人远程办公环境没搞好, 容易被打扰/分心; 协作人数</description>
    </item>
    
    <item>
      <title>Go: 开发过程中的一些bug</title>
      <link>https://wklken.me/posts/2021/01/28/golang-bugs.html</link>
      <pubDate>Thu, 28 Jan 2021 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/28/golang-bugs.html</guid>
      <description>1. make slice 很容易漏掉中间参数, 引入 bug并且很难排查 package main import &amp;#34;fmt&amp;#34; func doCopy(a []string) []string { b := make([]string, len(a)) for _, i := range a { b = append(b, i) } return b } func main() { a := []string{&amp;#34;hello&amp;#34;} b := doCopy(a) fmt.Println(b, len(b)) } 得到结果 [ hello]</description>
    </item>
    
    <item>
      <title>项目管理实践: 风险驱动开发</title>
      <link>https://wklken.me/posts/2021/01/27/risk-driven-mode.html</link>
      <pubDate>Wed, 27 Jan 2021 20:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/27/risk-driven-mode.html</guid>
      <description>风险驱动开发 快速迭代过程中的问题 在一个项目从0到1快速迭代开发的过程中, 除了常规的需求开发, 还会面临很多问题, 来自于deadline, 线上b</description>
    </item>
    
    <item>
      <title>Go: 一种error wrap调用链处理方式</title>
      <link>https://wklken.me/posts/2021/01/26/golang-error-wrap.html</link>
      <pubDate>Tue, 26 Jan 2021 14:38:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/26/golang-error-wrap.html</guid>
      <description>这是在做 Golang 项目中的一些实践 背景 在做一套内部公共服务, 提供后台API调用的时候, 某些情况下, 会返回500错误, 此时有两种做法 在后台记录详细的5</description>
    </item>
    
  </channel>
</rss>
